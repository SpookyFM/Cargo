// main global script file

int last_what;
int last_type;
Hotspot* last_hotspot;
Object* last_object;
Character* last_character;
InventoryItem* last_item;
InventoryItem* last_used_item;

String GetTypeString(int what,  int type) {
  if (what == 1) {
    if (type == 1) return "Look at hotspot";
    if (type == 2) return "Interact with hotspot";
    if (type == 3) return "Use inventory on hotspot";
    if (type == 4) return "Talk to hotspot";
    if (type == 5) return "Pick up hotspot";
    if (type == 6) return "Cursor Mode 8 on hotspot";
    if (type == 7) return "Cursor Mode 9 on hotspot";
  } else if (what == 2) {
    if (type == 0) return "Look at object";
    if (type == 1) return "Interact with object";
    if (type == 2) return "Talk to object";
    if (type == 3) return "Use inventory on object";
    if (type == 5) return "Pick up object";
    if (type == 6) return "Cursor Mode 8 on object";
    if (type == 7) return "Cursor Mode 9 on object";
  } else if (what == 3) {
    if (type == 0) return "Look at character";
    if (type == 1) return "Interact with character";
    if (type == 2) return "Speak to character";
    if (type == 3) return "Use inventory on character";
    if (type == 5) return "Pick up character";
    if (type == 6) return "Cursor Mode 8 on character";
    if (type == 7) return "Cursor Mode 9 on character";
  } else if (what == 4) {
    if (type == 1) return "Look at nothing";
    if (type == 2) return "Interact with nothing";
    if (type == 3) return "Use inventory with nothing";
    if (type == 4) return "Talk to nothing";
  } else if (what == 5) {
    if (type == 0) return "Look at inventory";
    if (type == 1) return "Interact with inventory";
    if (type == 2) return "Speak to inventory";
    if (type == 3) return "Use an inventory item on another";
    if (type == 4) return "Other click on inventory";
  }
  return "Undefined";
}



function initInGameEditingGUI() {
  // Initialize the Label
  String lastActionName = GetTypeString(last_what,  last_type);
  
  LastActionLabel.Text = lastActionName;
  
  
  if (last_what == 1) {
    LastTargetLabel.Text = last_hotspot.Name;
  } else if (last_what == 2) {
    LastTargetLabel.Text = last_object.Name;
  } else if (last_what == 3) {
    LastTargetLabel.Text = last_character.Name;
  } else if (last_what == 4) {
    LastTargetLabel.Text = "Nothing";
  } else if (last_what == 5) {
    LastTargetLabel.Text = last_item.Name;
  }
  
  
  
  
  
  
}



// A function that initializes a bunch of stuff.
function initialize_control_panel() { 
  // Centre the control panel
  gPanel.Centre(); 
  // Centre the Restart dialog as well
  gRestartYN.Centre(); 
  if (!IsSpeechVoxAvailable()) { 
    // If there is no speech-vox file, and therefore no speech,
    // disable all the controls related with speech.
    lblVoice.Visible = false;  
    btnVoice.Visible = false;  
    sldVoice.Visible = false;
  }
  else {
    // If there *is*, then set it to voice and text. It's best to use
    // both whenever possible, for the player's sake.
    //SetVoiceMode(eSpeechVoiceAndText); 
    // And reflect this in the control panel.
    btnVoice.Text = "Voice and Text"; 
  }
  if (!System.SupportsGammaControl) {
    // If we can't change the gamma settings, disable the relevant options.
    sldGamma.Visible = false; 
    lblGamma.Visible = false;
  } 
  
  //And now, set all the defaults
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  SetGameSpeed(40);
  sldSpeed.Value = 40;
  if (IsSpeechVoxAvailable()) {
     //SetVoiceMode(eSpeechVoiceAndText);
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }
  if (System.SupportsGammaControl) {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }
}





function repeatedly_execute() {
  
  // Enable/disable the inventory buttons
  btnInvUp.Visible = (invCustomInv.TopItem != 0);
  btnInvDown.Visible = ((invCustomInv.TopItem + invCustomInv.RowCount + invCustomInv.ItemsPerRow) < invCustomInv.ItemCount);
  
  // Put here anything you want to happen every game cycle, even when
  // the game is paused. This will not run when the game is blocked
  // inside a command like a blocking Walk()
  
  if (IsGamePaused() == 1) return;

  // Put here anything you want to happen every game cycle, but not
  // when the game is paused.
  
  
}

function repeatedly_execute_always() {
  
  // Put anything you want to happen every game cycle, even
  // when the game is blocked inside a command like a
  // blocking Walk().
  // You cannot run blocking commands from this function.
  
  // This code will close the inventory if we click outside it.
  if (mouse.IsButtonDown(eMouseLeft)) {
    GUI *theGui = GUI.GetAtScreenXY(mouse.x, mouse.y);
    {
    if (theGui != gInventory)
      {
        gInventory.Visible = false;
      }
    }
  } 
  
}

function show_inventory_window () 
{
  gInventory.Visible = true;
  // switch to the Use cursor (to select items with)
  mouse.Mode = eModeInteract;
  // But, override the appearance to look like the arrow
  mouse.UseModeGraphic(eModePointer);
}

function show_save_game_dialog()
{
  gSaveGame.Visible = true;
  // Get the list of save games
  lstSaveGamesList.FillSaveGameList();
  if (lstSaveGamesList.ItemCount > 0)
  {
    // If there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // No save games yet, default empty text.
    txtNewSaveName.Text = "";
  }
  mouse.UseModeGraphic(eModePointer);
  gIconbar.Visible = false;
}

function show_restore_game_dialog()
{
  gRestoreGame.Visible = true;
  lstRestoreGamesList.FillSaveGameList();
  mouse.UseModeGraphic(eModePointer);
  gIconbar.Visible = false;
}

function close_save_game_dialog()
{
  gSaveGame.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
}

function close_restore_game_dialog()
{
  gRestoreGame.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
}

function setButtonName(Button* control,  String variableName,  bool value) {
  String name = variableName;
  String valueString = "[true]";
  if (!value) {
    valueString = "[false]";
  }
  name = name.Append(" ");
  name = name.Append(valueString);
  control.Text = name;
  
}

function initCheatMenu() {
  setButtonName(button1, "flagAlienTaken",  flagAlienTaken);
  setButtonName(button2, "flagAlienCharged",  flagAlienCharged);
  setButtonName(button3, "flagAlienFirstEncounter",  flagAlienFirstEncounter);
  setButtonName(button4, "flagInvestigateAlien",  flagInvestigateAlien);
  setButtonName(button5, "flagBridgerGone",  flagBridgerGone);
  setButtonName(button6, "flagSecurityAlert",  flagSecurityAlert);
}

// Called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) {
  // The following is called before "if game is paused keycode=0", so
  // it'll happen even when the game is paused.
  
  if ((keycode == eKeyEscape) && gRestartYN.Visible) {
    //Use ESC to cancel restart.
    gRestartYN.Visible = false; 
    gIconbar.Visible = true;
    // If the panel's not ON, then the player must have gotten here by tapping F9,
    // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
    // because it's already a pointer. Get used to thinking like this!!
    if (!gPanel.Visible) mouse.UseDefaultGraphic(); 
    return;
  }
  if ((keycode == eKeyEscape) && gPanel.Visible) {
    // Use ESC to turn the panel off.
    gPanel.Visible = false; 
    mouse.UseDefaultGraphic();
    gIconbar.Visible = true;
    return;
  }
  if ((keycode == eKeyEscape) && (gSaveGame.Visible))
  {
    // Use ESC to close the save game dialog
    close_save_game_dialog();
    return;
  }
  if ((keycode == eKeyEscape) && (gRestoreGame.Visible))
  {
    // Use ESC to close the restore game dialog
    close_restore_game_dialog();
    return;
  }
  
  if (keycode == eKeyReturn) { 
    // ENTER, in this case merely confirms restart
    if (gRestartYN.Visible) RestartGame();
  }

  if (IsGamePaused() || (IsInterfaceEnabled() == 0))
  {
    // If the game is paused with a modal GUI on the
    // screen, or the player interface is disabled in
    // a cut scene, ignore any keypresses.
    return;
  }

  // FUNCTION KEYS AND SYSTEM SHORTCUTS
  if (keycode == eKeyEscape) {
    // ESC
    gPanel.Visible = true; 
    gIconbar.Visible = false;
    mouse.UseModeGraphic(eModePointer);
  }
  if (keycode == eKeyCtrlQ)  QuitGame(1);   // Ctrl-Q
  if (keycode == eKeyF5) show_save_game_dialog();   // F5
  if (keycode == eKeyF7) show_restore_game_dialog();  // F7
  if (keycode == eKeyF9) {
    // F9, asks the player to confirm restarting (so much better to always confirm first)
    gRestartYN.Visible = true;  
    gIconbar.Visible = false;
    mouse.UseModeGraphic(eModePointer);
  }
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.bmp");  // F12
  if (keycode == eKeyTab)   show_inventory_window();  // Tab, show inventory

  // GAME COMMAND SHORTCUTS
  if (keycode == 'W') mouse.Mode=eModeWalkto; //Notice this alternate way to indicate keycodes.
  if (keycode == 'L') mouse.Mode=eModeLookat; //Note that all we do here is set modes.
  if (keycode == 'U') mouse.Mode=eModeInteract; //If you want something else to happen, such as GUI buttons highlighting,
  if (keycode == 'T') mouse.Mode=eModeTalkto; //you'll need some more scripting done.
  if (keycode == 'I') mouse.Mode=eModeUseinv; //But this will, as-is, give you some standard keyboard shortcuts your players will very much appreciate.

  // For extra cursor modes, such as pick up, feel free to add as you will.
  // Uncomment the line below if you use the "Pick Up" mode.
  //if (keycode == 'P' || keycode == 'G') mouse.Mode=eModePickup; 

  // DEBUG FUNCTIONS
  if (keycode == eKeyCtrlS)  Debug(0,0);  // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV)  Debug(1,0);  // Ctrl-V, version
  if (keycode == eKeyCtrlA)  Debug(2,0);  // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX)  Debug(3,0);  // Ctrl-X, teleport to room
  if (keycode == eKeyCtrlW && game.debug_mode) 
    player.PlaceOnWalkableArea(); //Ctrl-W, move to walkable area 
  if (keycode == eKeyCtrlF) { 
    gCheatGUI.Visible = true;
    initCheatMenu();
  }
  if (keycode == eKeyCtrlE) {
    gGui2.Visible = true;
    initInGameEditingGUI();
  }
}


function on_mouse_click(MouseButton button) {
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused() == 1) {
    // Game is paused, so do nothing (ie. don't allow mouse click)
  }
  else if (button == eMouseLeft) {
    ProcessClick(mouse.x, mouse.y, mouse.Mode );
  }
  else if (button == eMouseRight || button == eMouseWheelSouth){
    // right-click our mouse-wheel down, so cycle cursor
    mouse.SelectNextMode();
  }
  else if (button == eMouseMiddle) { 
    // Middle-button-click, default make character walk to clicked area (a little shortcut)
    // Could have been just "player.Walk(mouse.x,mouse.y)", but it's best to
    // leave our options open - what if you have a special script triggered
    // on "walking" mode?
    ProcessClick(mouse.x, mouse.y, eModeWalkto); 
  }
  else if (button == eMouseWheelNorth) { 
    // Mouse-wheel up, cycle cursors 
    // If mode isn't WALK, set the previous mode (notice usage of numbers instead
    // of eNums, when it suits us)...
    if (mouse.Mode>0) mouse.Mode=mouse.Mode-1; 
    else 
    { 
      // ...but if it is WALK mode...
      if (player.ActiveInventory!=null) 
      {
        //...and the player has a selected inventory item, set mouse mode to UseInv. 
        mouse.Mode=eModeUseinv; 
      }
      else 
      {
        // If they don't, however, just set it to mode TALK (change this line if you add more cursor modes)
        mouse.Mode=eModeTalkto; 
      }
    }
  }
}

function interface_click(int interface, int button) {
  // This function is obsolete, from 2.62 and earlier versions.
}

function btnInvUp_Click(GUIControl *control, MouseButton button) {
  invCustomInv.ScrollUp();
}

function btnInvDown_Click(GUIControl *control, MouseButton button) {
  invCustomInv.ScrollDown();
  
  
  
}

function btnInvOK_Click(GUIControl *control, MouseButton button) {
	// They pressed the OK button, close the GUI
	gInventory.Visible = false;
	mouse.UseDefaultGraphic();
}

function btnInvSelect_Click(GUIControl *control, MouseButton button) {
  
	// They pressed SELECT, so switch to the Get cursor
	mouse.Mode = eModeInteract;
	// But, override the appearance to look like the arrow
	mouse.UseModeGraphic(eModePointer);
}

function btnIconInv_Click(GUIControl *control, MouseButton button) {
  
  show_inventory_window();
}

function btnIconCurInv_Click(GUIControl *control, MouseButton button) {
  
  if (player.ActiveInventory != null)
    mouse.Mode = eModeUseinv;
}

function btnIconSave_Click(GUIControl *control, MouseButton button) 
{
  show_save_game_dialog();
}

function btnIconLoad_Click(GUIControl *control, MouseButton button) 
{
  show_restore_game_dialog();
}

function btnIconExit_Click(GUIControl *control, MouseButton button) {
  gPanel.Visible = false;
  Wait(1);
  // gPanel.Visible = true;
  gIconbar.Visible = false;
  mouse.UseModeGraphic(eModePointer);
  gQuitGUI.Visible = true;
}

function btnIconAbout_Click(GUIControl *control, MouseButton button) {
  
  gPanel.Visible=true;
  gIconbar.Visible=false;
  mouse.UseModeGraphic(eModePointer);
}

//START OF CONTROL PANEL FUNCTIONS
function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
  Wait(1);
  btnIconSave_Click(btnIconSave, eMouseLeft);
}

function gControl_OnClick(GUI *theGui, MouseButton button)
{

}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
Display("Adventure Game Studio run-time engine default game.");
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  Wait(1);
  QuitGame(1);
  gPanel.Visible = true;
  gIconbar.Visible = false;
  mouse.UseModeGraphic(eModePointer);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
  Wait(1);
  btnIconLoad_Click(btnIconLoad, eMouseLeft);
}

function btnResume_OnClick(GUIControl *control, MouseButton button)
{
  gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  // Sets voice volume. Note that we don't check for the existence of speech.vox - 
  // we did that in game_start, so if it's not there the slider won't even be available.
  SetSpeechVolume(sldVoice.Value); 
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  // Note that we don't check for the existence of speech.vox - we did that in game_start,
  // so if it's not there the button won't even be available.
  if (btnVoice.Text == "Voice and Text") { 
    // SetVoiceMode(eSpeechVoiceOnly); 
    btnVoice.Text = "Voice only";
  }
  else if (btnVoice.Text == "Voice only") {
    //SetVoiceMode(eSpeechTextOnly);
    btnVoice.Text = "Text only";
  }
  else if (btnVoice.Text == "Text only") {
    //SetVoiceMode(eSpeechVoiceAndText);
    btnVoice.Text = "Voice and Text";
  }
}

function sldGamma_OnChange(GUIControl *control)
{
  // Set the gamma. Note there's no need to check for anything else, as we ensured,
  // in game_start, that the slider won't even appear if it's not possible to do this.
  System.Gamma = sldGamma.Value; 
}

function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  // Reset everything to default. You'll have to edit these as well as the sliders
  // if you'd rather have different default parameters.
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 40;
  SetGameSpeed(40);
  if (IsSpeechVoxAvailable()) {
     // SetVoiceMode(eSpeechVoiceAndText);
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }
  if (System.SupportsGammaControl) {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }
}
//END OF CONTROL PANEL FUNCTIONS





function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible=true;
  gIconbar.Visible=false;
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

function btnRestartNo_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible = false;
  gIconbar.Visible = true;
  // If the panel's not ON, then the player must have gotten here by tapping F9,
  // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
  // because it's already a pointer. Get used to thinking like this!!
  if (!gPanel.Visible) mouse.UseDefaultGraphic(); 
}

function btnCancelSave_OnClick(GUIControl *control, MouseButton button)
{
  close_save_game_dialog();
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = lstSaveGamesList.ItemCount + 1;
  int i = 0;
  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == txtNewSaveName.Text)
    {
      gameSlotToSaveInto = lstSaveGamesList.SaveGameSlots[i];
    }
    i++;
  }
  SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
  close_save_game_dialog();
}

function btnCancelRestore_OnClick(GUIControl *control, MouseButton button)
{
  close_restore_game_dialog();
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  close_restore_game_dialog();
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // Pressing return in the text box simulates clicking the Save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}


function cEgo_Look()
{
  Display("You take a look at your uniform. One day, you will trade this one for that of a pilot!");
}

function cEgo_Interact()
{
  Display("You take a moment to adjust your uniform. Any moment, some important space administration functionary could walk in here, and in that case, you would want to look your best!");
}

function cEgo_Talk()
{
  
  Display("You mumble to yourself for a moment.");
}


int pdaState = 0;

function dialog_request(int request) {
   // Requests 1-3 are from the PDA dialogue
   if (request == 1) {
      Display("The PDA now shows an image of sector A-7, where the samples in the boxes have been collected.");
      iPDA.Name = "PDA (showing star chart)";
      iPDA.Graphic = 39;
   }
   if (request < 4) {
     if (request == 2) {
       iPDA.Name = "PDA (showing crew roster)";
       iPDA.Graphic = 40;
     } else if (request == 3) {
       iPDA.Name = "PDA (showing news)";
       iPDA.Graphic = 42;
     }
    pdaState = request;
   } 
   
   // Request 4 is the cut scene where Bridger leaves
   if (request == 4) {
    cSuperior.Say("Not again... It's my break, can't you see?");
    cSuperior.Say("Ok, I'll have a look at it, you wait here.");
    FadeOut(2);
    cSuperior.ChangeRoom(-1);
    aDoorOpen.Play();
    FadeIn(2);
    Display("Mr. Bridger left in a hurry. You are free to do as you want in the crew area while he is gone.");
    flagBridgerGone = true;
   }
 }

function cAlien_Look()
{
  Display("A strange apparation has emerged from the box. You'd better go and get your supervisor!");
}


function ShowPDA() {
  gPdaGUI.Visible = true;
  if (pdaState == 0) {
    aPDA.Play();
    gPdaGUI.BackgroundGraphic = 142;
    iPDA.Name = "PDA (showing star chart)";
    iPDA.Graphic = 39;
    pdaState = 1;
  }
  mouse.UseModeGraphic(eModePointer);
  gInventory.Visible = false;
}

function HidePDA() {
  gPdaGUI.Visible = false;
  mouse.UseDefaultGraphic();
}


function iPDA_Look()
{
  if (pdaState == 0) {
    Display("This is your PDA. You use it to check your tasks, bring up information on the cargo that is being handled and many more information.");
    Display("You have a look at your PDA.");
    aPDA.Play();
    ShowPDA();
  } else {
    String message = "This is your PDA. It is showing ";
    if (pdaState == 1) {
      message = message.Append("a star chart of the system where the samples were collected.");
    } else if (pdaState == 2) {
      message = message.Append("the current crew roster.");
    } else if (pdaState == 3) {
      message = message.Append("a selection of news.");
    }
    Display(message);
    aPDA.Play();
    Display("You have a look at your PDA.");
    ShowPDA();
  }
}

function iPDA_Interact()
{
    
}

function cEgo_UseInv()
{
  if (cEgo.ActiveInventory == iPDA) {
    ShowPDA();
  } else if (cEgo.ActiveInventory == iAlien) {
    if (cEgo.Room == 2) {
      if (!flagBridgerGone) {
        Display("You'd better not get the alien out while Bridger is here.");
      }
    } else {
      Display("You hold the rock with the alien in your hands.");
      cEgo.Say("You must be lonely, all alone here. I will help you!");
      Display("You can feel the thankfulness stream through you from the point where your hands touch the rock all the way through your body.");
    }
  } else if (cEgo.ActiveInventory == iResidueScanner) {
    Display("Of course you are full of human residue - you produce the stuff day and night!");
  } else {
    Display("There's nothing you want to do with this item.");
  }
}




function cAlien_UseInv()
{
  if (cEgo.ActiveInventory == iPDA) {
    if (pdaState == 0) {
      // Nothing
      Display("You try showing the PDA to the thing. Nothing happens. Maybe if the PDA was showing something more interesting.?");
    } else if (pdaState == 1) {
      // Star chart
      flagAlienFirstEncounter = false;
      flagInvestigateAlien = false;
      cEgo.Loop = 1;
      Display("You hold the PDA showing the star charts next to the wavering cloud.");
      Display("Ripples of energy pass over it, but you can still hold it.");
      Display("Then, the color of the thing starts to shift. At the same time, the emotions that seem to emanate it shift. You feel a great sorrow and longing, as if this... thing was missing something...");
      cEgo.Say("Are you... are you homesick? Is this where you are from?");
      Display("It might have been the words you said or the things you were thinking about, but again, the emotions change. You begin to feel a glimmer of hope among the despair.");
      cEgo.Say("Yes, this is your home! You must be some kind of life form that lives among the stars!");
      cEgo.Loop = 0;
      cEgo.Say("And we have kidnapped you...");
      Display("You form a plan - you will get this alien back to its home!");
      cEgo.Say("Let's see...");
      cEgo.Loop = 1;
      cEgo.Say("The PDA says that the ship will leave again tomorrow morning for the same star system to deploy a shipment of autonomous satellites.");
      cEgo.Say("We have go get you onto that ship!");
      Display("You feel a tingle from the alien, along with a feeling of hope.");
      cEgo.Say("The satellites have already been loaded, and access to the ship is restricted. I have to find a way to get you onto the ship and into the cargo hold.");
      Display("You start to consider the practicalities of your plan. What else is there to do?");
      cEgo.Say("You must probably eat something. Maybe you feed on energy?");
      Display("As if to confirm what you said, the cloud infront of you changes color and you feel a positive emotion.");
      cEgo.Say("That's probably why the force field emitters malfunctioned.");
      cEgo.Say("You will probably need to recharge for the trip ahead of you. We should find some way to give you some energy before the trip back.");
      cEgo.Say("Is it ok if I carry you around with me?");
      Display("Again, you feel hope and thankfulness wash over you.");
      cEgo.Say("Alright, let's do this!");
      cEgo.Walk(701, 664, eBlock);
      cAlien.Animate(1,  5, eOnce, eBlock, eBackwards);
      Display("You take the rock with the alien creature from the box.");
      cEgo.AddInventory(iAlien);
      cAlien.ChangeRoom(-1);
      flagAlienTaken = true;
    } else if (pdaState == 2) {
      // Crew roster
      Display("You hold the PDA next to the alien, thinking that showing the ...");
    } else if (pdaState == 3) {
      // News
      Display("You hold the PDA next to the alien, but nothing seems to happen. Maybe another information might trigger a more visible reaction?");
    }
  } else if (cEgo.ActiveInventory == iRemoteControl) {
    // We can only point it at the alien after the force field emitters are down
    Display("You consider pointing the remote control at the creature, but as the emitters seemed to cause this in the first place, you decide against it.");
  } else {
    Display("You decide using this item on the thing.");
  }
  
 
}

function cSuperior_Talk()
{
  if (flagSecurityAlert) {
    dBridgerMain.SetOptionState(1, eOptionOn);
  } else {
    dBridgerMain.SetOptionState(1,  eOptionOff);
  }
    cEgo.Walk(415,  553,  eBlock);
    cEgo.FaceCharacter(cSuperior);
    if (!flagBridgerTalkedBefore) {
      dBridgerDone.Start();
      flagBridgerTalkedBefore = true;
    } else {
      dBridgerMain.Start();
    }
}

function iBox_UseInv()
{
  if (cEgo.ActiveInventory == iAlien) {
    // Prerequisites that are necessary:
  // The door is open
  if (!flagDoorOpen) {
    Display("That is an excellent idea, the box should screen the alien from the security scanner.");
    Display("However, you decide to wait until you have found a way to open the door in the first place before you put the alien away.");
  } 
  // The alien is charged
  else if (!flagAlienCharged) {
    Display("That is an excellent idea, the box should screen the alien from the scanner.");
    Display("However, you decide to wait until you have found a way to charge the alien with energy before you put it away.");
  } else {
    Display("That is an excellent idea, the box should screen the alien from the security scanner.");
    Display("You put the alien inside the sensor transport box.");
    aBox.Play();
    cEgo.LoseInventory(iBox);
    cEgo.AddInventory(iBoxWithAlien);
  }
  } else {
    Display("There should be something better to put in the box.");
  }
}




struct HotspotStrings {
  String Look;
  String Interact;
  String UseInventory;
  String Talk;
  String PickUp;
  String Cursor8;
  String Cursor9;
};




struct ObjectStrings {
  String Look;
  String Interact;
  String Talk;
  String UseInventory;
  String PickUp;
  String Cursor8;
  String Cursor9;
};


struct CharacterStrings {
  String Look;
  String Interact;
  String Talk;
  String UseInventory;
  String PickUp;
  String Cursor8;
  String Cursor9;
};


 
struct NothingStrings {
  String Look;
  String Interact;
  String UseInventory;
  String Talk;
};


struct InventoryStrings {
  String Look;
  String Interact;
  String UseInventory;
  String Talk;
  String OtherClick;
};

HotspotStrings hotspotStrings;
ObjectStrings objectStrings;
CharacterStrings characterStrings;
NothingStrings nothingStrings;
InventoryStrings inventoryStrings;
String descriptionStrings[50];



function InitStringsDebug() {
  hotspotStrings.Look = "NO DESCRIPTION AVAILABLE - LOOK HOTSPOT";
  hotspotStrings.Interact = "NO DESCRIPTION AVAILABLE - INTERACT HOTSPOT";
  hotspotStrings.UseInventory = "NO DESCRIPTION AVAILABLE - USE INVENTORY HOTSPOT";
  hotspotStrings.Talk = "NO DESCRIPTION AVAILABLE - TALK HOTSPOT";
  hotspotStrings.PickUp = "NO DESCRIPTION AVAILABLE - PICK UP HOTSPOT";
  hotspotStrings.Cursor8 = "NO DESCRIPTION AVAILABLE - CURSOR 8 HOTSPOT";
  hotspotStrings.Cursor9 = "NO DESCRIPTION AVAILABLE - CURSOR 9 HOTSPOT";
  
  objectStrings.Look = "NO DESCRIPTION AVAILABLE - LOOK OBJECT";
  objectStrings.Interact = "NO DESCRIPTION AVAILABLE - INTERACT OBJECT";
  objectStrings.UseInventory = "NO DESCRIPTION AVAILABLE - USE INVENTORY OBJECT";
  objectStrings.Talk = "NO DESCRIPTION AVAILABLE - TALK OBJECT";
  objectStrings.PickUp = "NO DESCRIPTION AVAILABLE - PICK UP OBJECT";
  objectStrings.Cursor8 = "NO DESCRIPTION AVAILABLE - CURSOR 8 OBJECT";
  objectStrings.Cursor9 = "NO DESCRIPTION AVAILABLE - CURSOR 9 OBJECT";
  
  characterStrings.Look = "NO DESCRIPTION AVAILABLE - LOOK CHARACTER";
  characterStrings.Interact = "NO DESCRIPTION AVAILABLE - INTERACT CHARACTER";
  characterStrings.UseInventory = "NO DESCRIPTION AVAILABLE - USE INVENTORY CHARACTER";
  characterStrings.Talk = "NO DESCRIPTION AVAILABLE - TALK CHARACTER";
  characterStrings.PickUp = "NO DESCRIPTION AVAILABLE - PICK UP CHARACTER";
  characterStrings.Cursor8 = "NO DESCRIPTION AVAILABLE - CURSOR 8 CHARACTER";
  characterStrings.Cursor9 = "NO DESCRIPTION AVAILABLE - CURSOR 9 CHARACTER";
  
  nothingStrings.Look = "NO DESCRIPTION AVAILABLE - LOOK NOTHING";
  nothingStrings.Interact = "NO DESCRIPTION AVAILABLE - INTERACT NOTHING";
  nothingStrings.UseInventory = "NO DESCRIPTION AVAILABLE - USE INVENTORY NOTHING";
  nothingStrings.Talk = "NO DESCRIPTION AVAILABLE - TALK NOTHING";
  
  inventoryStrings.Look = "NO DESCRIPTION AVAILABLE - LOOK INVENTORY";
  inventoryStrings.Interact = "NO DESCRIPTION AVAILABLE - INTERACT INVENTORY";
  inventoryStrings.UseInventory = "NO DESCRIPTION AVAILABLE - USE INVENTORY INVENTORY";
  inventoryStrings.Talk = "NO DESCRIPTION AVAILABLE - TALK INVENTORY";
  inventoryStrings.OtherClick = "NO DESCRIPTION AVAILABLE - OTHER CLICK INVENTORY";
  
  descriptionStrings[1] = hotspotStrings.Look;
  descriptionStrings[2] = hotspotStrings.Interact;
  descriptionStrings[3] = hotspotStrings.UseInventory;
  descriptionStrings[4] = hotspotStrings.Talk;
  descriptionStrings[7] = hotspotStrings.PickUp;
  descriptionStrings[8] = hotspotStrings.Cursor8;
  descriptionStrings[9] = hotspotStrings.Cursor9;
  
  descriptionStrings[10] = objectStrings.Look;
  descriptionStrings[11] = objectStrings.Interact;
  descriptionStrings[12] = objectStrings.Talk;
  descriptionStrings[13] = objectStrings.UseInventory;
  descriptionStrings[15] = objectStrings.PickUp;
  descriptionStrings[16] = objectStrings.Cursor8;
  descriptionStrings[17] = objectStrings.Cursor9;
  
  descriptionStrings[20] = characterStrings.Look;
  descriptionStrings[21] = characterStrings.Interact;
  descriptionStrings[22] = characterStrings.Talk;
  descriptionStrings[23] = characterStrings.UseInventory;
  descriptionStrings[25] = characterStrings.PickUp;
  descriptionStrings[26] = characterStrings.Cursor8;
  descriptionStrings[27] = characterStrings.Cursor9;
  
  descriptionStrings[31] = nothingStrings.Look;
  descriptionStrings[32] = nothingStrings.Interact;
  descriptionStrings[33] = nothingStrings.UseInventory;
  descriptionStrings[34] = nothingStrings.Talk;
  
  descriptionStrings[40] = inventoryStrings.Look;
  descriptionStrings[41] = inventoryStrings.Interact;
  descriptionStrings[42] = inventoryStrings.UseInventory;
  descriptionStrings[43] = inventoryStrings.Talk;
  descriptionStrings[44] = inventoryStrings.OtherClick;
  
}


function InitStringsRelease() {
  hotspotStrings.Look = "You take a look. There is nothing remarkable about it.";
  hotspotStrings.Interact = "You try fiddling with it, to no avail.";
  hotspotStrings.UseInventory = "This doesn't work.";
  hotspotStrings.Talk = "No use trying to talk to it.";
  hotspotStrings.PickUp = "You can't pick that up.";
  hotspotStrings.Cursor8 = "NO DESCRIPTION AVAILABLE - CURSOR 8";
  hotspotStrings.Cursor9 = "NO DESCRIPTION AVAILABLE - CURSOR 9";
  
  objectStrings.Look = "You take a look. There is nothing remarkable about it.";
  objectStrings.Interact = "You try fiddling with it, to no avail.";
  objectStrings.UseInventory = "This doesn't work.";
  objectStrings.Talk = "No use trying to talk to it.";
  objectStrings.PickUp = "You can't pick that up.";
  objectStrings.Cursor8 = "NO DESCRIPTION AVAILABLE - CURSOR 8";
  objectStrings.Cursor9 = "NO DESCRIPTION AVAILABLE - CURSOR 9";
  
  characterStrings.Look = "There is nothing remarkable.";
  characterStrings.Interact = "You decide against it.";
  characterStrings.UseInventory = "These things don't go together.";
  characterStrings.Talk = "No one answers.";
  characterStrings.PickUp = "You can't pick that up.";
  characterStrings.Cursor8 = "NO DESCRIPTION AVAILABLE - CURSOR 8";
  characterStrings.Cursor9 = "NO DESCRIPTION AVAILABLE - CURSOR 9";
  
  nothingStrings.Look = "NO DESCRIPTION AVAILABLE - LOOK";
  nothingStrings.Interact = "NO DESCRIPTION AVAILABLE - INTERACT";
  nothingStrings.UseInventory = "NO DESCRIPTION AVAILABLE - USE INVENTORY";
  nothingStrings.Talk = "NO DESCRIPTION AVAILABLE - TALK";
  
  inventoryStrings.Look = "NO DESCRIPTION AVAILABLE - LOOK";
  inventoryStrings.Interact = "NO DESCRIPTION AVAILABLE - INTERACT";
  inventoryStrings.UseInventory = "NO DESCRIPTION AVAILABLE - USE INVENTORY";
  inventoryStrings.Talk = "These two items don't go together.";
  inventoryStrings.OtherClick = "NO DESCRIPTION AVAILABLE - OTHER CLICK";
  
  descriptionStrings[1] = hotspotStrings.Look;
  descriptionStrings[2] = hotspotStrings.Interact;
  descriptionStrings[3] = hotspotStrings.UseInventory;
  descriptionStrings[4] = hotspotStrings.Talk;
  descriptionStrings[7] = hotspotStrings.PickUp;
  descriptionStrings[8] = hotspotStrings.Cursor8;
  descriptionStrings[9] = hotspotStrings.Cursor9;
  
  descriptionStrings[10] = objectStrings.Look;
  descriptionStrings[11] = objectStrings.Interact;
  descriptionStrings[12] = objectStrings.Talk;
  descriptionStrings[13] = objectStrings.UseInventory;
  descriptionStrings[15] = objectStrings.PickUp;
  descriptionStrings[16] = objectStrings.Cursor8;
  descriptionStrings[17] = objectStrings.Cursor9;
  
  descriptionStrings[20] = characterStrings.Look;
  descriptionStrings[21] = characterStrings.Interact;
  descriptionStrings[22] = characterStrings.Talk;
  descriptionStrings[23] = characterStrings.UseInventory;
  descriptionStrings[25] = characterStrings.PickUp;
  descriptionStrings[26] = characterStrings.Cursor8;
  descriptionStrings[27] = characterStrings.Cursor9;
  
  descriptionStrings[31] = nothingStrings.Look;
  descriptionStrings[32] = nothingStrings.Interact;
  descriptionStrings[33] = nothingStrings.UseInventory;
  descriptionStrings[34] = nothingStrings.Talk;
  
  descriptionStrings[40] = inventoryStrings.Look;
  descriptionStrings[41] = inventoryStrings.Interact;
  descriptionStrings[42] = inventoryStrings.UseInventory;
  descriptionStrings[43] = inventoryStrings.Talk;
  descriptionStrings[44] = inventoryStrings.OtherClick;
}





function unhandled_event_editor(int what, int type) {
  last_what = what;
  last_type = type;
  
  if (last_what == 1) {
      // Something with a hotspot
      last_hotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  } else if (last_what == 2) {
      // Something with an object
      last_object = Object.GetAtScreenXY(mouse.x,  mouse.y);
  } else if (last_what == 3) {
      // Something with a character
      last_character = Character.GetAtScreenXY(mouse.x, mouse.y);
  } else if (last_what == 5) {
    // Something with an inventory item
    InventoryItem.GetAtScreenXY(mouse.x,  mouse.y);
    // last_item = game.inv_activated;
  }
  
  // TODO: Check for the right cases
  last_used_item = cEgo.ActiveInventory;
    

  
  // TODO: Offer a GUI with the most-often used choices (Display, Say, ...)
  
  // TODO: Override the default behaviour
  
}

function unhandled_event (int what, int type) {
  unhandled_event_editor(what,  type);
  String result = descriptionStrings[(what - 1) * 10 + type];
  
  if ((what == 4) & (type == 1)) {
    // Looked at nothing
    if (cEgo.Room == 1) {
      result = "You see the central hub of the landing platform. Doors lead to the outside, the cargo area, the crew area and the landing platform itself.";
    } else if (cEgo.Room == 2) {
      result = "You are in the staff area. This is where you spend your breaks, dreaming about the time when you might go to the academy.";
    } else if (cEgo.Room == 3) {
      result = "You are in the cargo area, where an opening in the roof allows cargo to be transported from and to the landing ships.";
    } else if (cEgo.Room == 4) {
      result = "You are in a small room which is used for minor repairs.";
    }
  }
  
  bool isUseInventory = ((what == 1) & (type == 3)) | ((what == 2) & (type == 3)) | ((what == 5) & (type == 2));
  
  if (isUseInventory){
    // Use item on hotspot, object or inventory item
    if (cEgo.ActiveInventory == iResidueScanner) {
      Display("You scan it with your residue scanner. Apart from the normal residue found wherever humans work, you see nothing.");
    } else if (cEgo.ActiveInventory == iAlien) {
      Display("You consider getting the alien out, but decide against it. Better not risk anyone seeing it without the need for it.");
    } else if (cEgo.ActiveInventory == iScrewdriver) {
      Display("There's nothing to screw open here.");
    } else if (cEgo.ActiveInventory == iKeycard) {
      Display("The keycard has no use here.");
    } else if (cEgo.ActiveInventory == iPDA) {
      Display("Using the PDA on this won't do anything.");
    }
  }
  
  
  
  Display(result);

  
}

function MyInit() {
  game.text_shadow_color = 0;
  
  
  // Initialize the strings for unhandled events
  InitStringsRelease();
  
  // Initialize the "Description" module.
      Description.Location=eDescLocationStatic;
    Description.VerbMode=eDescVerbModeNever;
    Description.OLColor=65000;
    Description.MinY = 100;
    Description.MaxY = 100;
    Description.GUIMode(gDescriptionLabel);

}


// Called when the game starts, before the first room is loaded
function game_start() {   
  // Put the code all in a function and then just call the function. 
  // It saves cluttering up places like game_start.
  initialize_control_panel(); 
  // Use the KeyboardMovement module to, per default, replicate the standard
  // keyboard movement of most Sierra games. See KeyboardMovement.txt for more info
  KeyboardMovement.SetMode(eKeyboardMovement_Tapping); 
  
  // Change the default font
  //Game.NormalFont = eFontFont5;
  //Game.SpeechFont = eFontFont6;
  
  MyInit();
}

function iRemoteControl_Look()
{
  Display("This it the remote control that you use to power up and control the tractor beams.");
}

function iAlien_Look()
{
  Display("The alien has retreated into the rock that you picked up from the box.");
  if (flagAlienCharged) {
    Display("Energy is sparkling across the rock's surface. It looks like it is charged with a lot of energy.");
  }
}

function iBrokenFuse_Look()
{
  Display("A broken fuse you took from the charging station.");
}

function iFuse_Look()
{
  Display("An electrical fuse. It looks brand new.");
}

function iScrewdriver_Look()
{
  Display("A screwdriver.");
  cEgo.Say("We built space ships that can travel the far reaches of space.");
  cEgo.Say("But we haven't gotten rid of these things.");
}

function iBox_Look()
{
  Display("It's a transport box for delicate equiment. The contents are shielded from a wide spectrum of energy fields.");
}

function iResidueScanner_Look()
{
  Display("A scanner that can detect human residues such as lipids or scurf, so delicate equipment can be shielded from it.");
}

function iKeycard_Look()
{
  Display("Bridger's keycard that you... borrowed from his locker. It should give you clearance for the terminal to the ship.");
}

function iBoxWithAlien_Look()
{
  Display("You can see the alien inside it's rock as you lift the opening of the box. It should be shielded inside there.");
  if (flagAlienCharged) {
    Display("Energy is sparkling across the rock's surface. It looks like it is charged with a lot of energy.");
  }
}





function Button1_OnClick(GUIControl *control, MouseButton button)
{
  flagAlienTaken = !flagAlienTaken;
  initCheatMenu();
  // TODO: Are there modules which implement this automatically?
  
  
  // TODO: Design a tool that can capture missing texts during runtime of an adventure and save them?
  
}

function Button2_OnClick(GUIControl *control, MouseButton button)
{
  flagAlienCharged = !flagAlienCharged;
  
  initCheatMenu();
}

function Button3_OnClick(GUIControl *control, MouseButton button)
{
  flagAlienFirstEncounter = !flagAlienFirstEncounter;
  
  initCheatMenu();
}

function Button4_OnClick(GUIControl *control, MouseButton button)
{
  flagInvestigateAlien = !flagInvestigateAlien;
initCheatMenu();
}

function Button5_OnClick(GUIControl *control, MouseButton button)
{
  flagBridgerGone = !flagBridgerGone;
  initCheatMenu();
}


function button6_OnClick(GUIControl *control, MouseButton button)
{
  flagSecurityAlert = !flagSecurityAlert;
  initCheatMenu();
}

function Button6_OnClick(GUIControl *control, MouseButton button)
{
  gCheatGUI.Visible = false;
}

function cAlien_Talk()
{
  cEgo.Say("Hello...?");
  cEgo.Say("Can you understand me?");
  Display("You feel something at the back of your mind, but the feeling is very diffuse.");
  Display("Maybe there is some other way in which you could show your good intentions to this thing?");
}

function cSuperior_Interact()
{
  Display("Mr. Bridger doesn't like body contact. And neither do you want any body contact with him!");
}

function cSuperior_Look()
{
  Display("This is John Bridger, your supervisor. He is taking a break at the moment.");
}

function cSuperior_UseInv()
{
  if (cEgo.ActiveInventory == iAlien) {
    Display("No way you are showing the alien to Bridger - he would have it killed and you court-martialed in a nanosecond!");
  } else if (cEgo.ActiveInventory == iResidueScanner) {
    Display("No need to scan Bridger for residue. You can already see enough residue of his hair on his uniform with your bare eyes...");
  } else {
    Display("You decide against showing this item to Bridger.");
  }
}

function buttonGiveAlien_OnClick(GUIControl *control, MouseButton button)
{
  cEgo.AddInventory(iAlien);
  flagAlienTaken = true;
}

function gInventory_OnClick(GUI *theGui, MouseButton button)
{
/*  if (gInventory.Visible && (button == eMouseLeft || button == eMouseRight)) {
    gInventory.Visible = false;
    return;
  } */
}




function bNewGame_OnClick(GUIControl *control, MouseButton button)
{
  gStartScreenGUI.Visible = false;
  gIconbar.Visible = true;
  cEgo.ChangeRoom(3);
}

function bLoadGame_OnClick(GUIControl *control, MouseButton button)
{
  show_restore_game_dialog();
}

function btnDontQuit_OnClick(GUIControl *control, MouseButton button)
{
  gQuitGUI.Visible = false;
  gIconbar.Visible = true;
  
}

function btnYesQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function bLastShipment_OnClick(GUIControl *control, MouseButton button)
{
  aPDA.Play();
  gPdaGUI.BackgroundGraphic = 142;
  iPDA.Name = "PDA (showing star chart)";
  iPDA.Graphic = 39;
  pdaState = 1;
}

function bCrewRoster_OnClick(GUIControl *control, MouseButton button)
{
  aPDA.Play();
  gPdaGUI.BackgroundGraphic = 140;
  iPDA.Name = "PDA (showing crew roster)";
  iPDA.Graphic = 40;
  pdaState = 2;
}

function bNews_OnClick(GUIControl *control, MouseButton button)
{
  aPDA.Play();
  gPdaGUI.BackgroundGraphic = 141;
  iPDA.Name = "PDA (showing news)";
  iPDA.Graphic = 42;
  pdaState = 3;
}
function bReturn_OnClick(GUIControl *control, MouseButton button)
{
 HidePDA();
}
